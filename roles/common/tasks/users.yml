---
# GESTIÓN DE USUARIOS - Estructura simplificada
- name: "Cargar configuración de usuarios"
  include_vars: "{{ playbook_dir }}/users.yml"

- name: "Crear grupos docker si se necesita"
  group:
    name: docker
    state: present
  when: 
    - users is defined
    - users | map(attribute='groups') | flatten | select('equalto', 'docker') | list | length > 0

- name: "Crear grupos personalizados si es necesario"
  group:
    name: "{{ item }}"
    state: present
  loop: "{{ custom_groups | unique }}"
  vars:
    # Grupos que definitivamente existen en sistemas Linux estándar
    standard_groups:
      - sudo
      - adm
      - root
      - users
      - staff
    # Grupos que pueden no existir pero son comunes
    optional_groups:
      - docker
      - www-data
      - systemd-journal
    all_groups: "{{ users | map(attribute='groups') | flatten | unique }}"
    custom_groups: "{{ all_groups | difference(standard_groups) | difference(optional_groups) }}"
  when: 
    - users is defined
    - custom_groups | length > 0

- name: "Crear usuarios del sistema"
  user:
    name: "{{ item.user }}"
    comment: "{{ item.email }}"
    groups: "{{ item.groups | join(',') }}"
    shell: /bin/bash
    create_home: yes
    append: yes
    state: present
  loop: "{{ users }}"
  when: users is defined

- name: "Configurar claves SSH públicas"
  authorized_key:
    user: "{{ item.0.user }}"
    key: "{{ item.1.key }}"
    comment: "{{ item.1.name }} - {{ item.0.email }}"
    state: present
  loop: "{{ users | subelements('authorized_keys', skip_missing=True) }}"
  when: users is defined
  ignore_errors: yes

- name: "Configurar sudo sin contraseña para usuarios sudo"
  lineinfile:
    path: /etc/sudoers.d/curso-infra-users
    line: "{{ item.user }} ALL=(ALL) NOPASSWD:ALL"
    create: yes
    mode: '0440'
    validate: 'visudo -cf %s'
  loop: "{{ users }}"
  when: 
    - users is defined
    - "'sudo' in item.groups"

- name: "Limpiar usuarios por defecto del sistema"
  user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    groups: "{{ item.groups | join(',') if item.groups else omit }}"
    state: "{{ item.state }}"
    remove: "{{ true if item.state == 'absent' else false }}"
  loop: "{{ cleanup_users }}"
  when: cleanup_users is defined

- name: "Limpiar claves SSH de usuarios por defecto"
  authorized_key:
    user: "{{ item.0.user }}"
    key: "{{ item.1.key }}"
    state: absent
  loop: "{{ cleanup_users | subelements('authorized_keys', skip_missing=True) }}"
  when: cleanup_users is defined
  ignore_errors: yes

- name: "Agregar usuarios al grupo docker (si existe)"
  user:
    name: "{{ item.user }}"
    groups: docker
    append: yes
  loop: "{{ users }}"
  when:
    - users is defined
    - "'docker' in item.groups"
  ignore_errors: yes  # El grupo docker puede no existir hasta que se instale

- name: "Mostrar resumen de usuarios configurados"
  debug:
    msg: 
      - "Usuarios configurados en {{ group_names[0] }}:"
      - "{{ users | map(attribute='user') | list | join(', ') if users else 'Ninguno' }}"
  when: users is defined
