#!/bin/bash
# Script de limpieza para GitHub Actions Runners
# Ejecutado automáticamente por cron

set -e

LOG_FILE="/var/log/github-runner-cleanup.log"
RETENTION_DAYS="{{ github_runner_cleanup_retention_days }}"
RUNNER_DIR="{{ github_runner_directory }}"

# Función de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

log "Iniciando limpieza de GitHub Actions Runners"

# Limpiar logs antiguos
log "Limpiando logs de runners más antiguos de $RETENTION_DAYS días"
find /var/log/github-runner -name "*.log" -type f -mtime +$RETENTION_DAYS -delete 2>/dev/null || true

# Limpiar directorios de trabajo antiguos
log "Limpiando directorios de trabajo antiguos"
find "$RUNNER_DIR" -name "_work" -type d -exec bash -c '
    WORK_DIR="$1"
    if [ -d "$WORK_DIR" ]; then
        # Limpiar archivos temporales más antiguos de 1 día
        find "$WORK_DIR" -type f -mtime +1 -delete 2>/dev/null || true
        # Limpiar directorios vacíos
        find "$WORK_DIR" -type d -empty -delete 2>/dev/null || true
    fi
' bash {} \;

# Verificar estado de los servicios
log "Verificando estado de los servicios de runners"
for service in $(systemctl list-units --type=service --state=running | grep github-runner | awk '{print $1}'); do
    if ! systemctl is-active --quiet "$service"; then
        log "WARNING: Servicio $service no está activo"
        systemctl restart "$service" || log "ERROR: No se pudo reiniciar $service"
    fi
done

# Limpiar imágenes Docker antiguas si Docker está disponible
if command -v docker &> /dev/null; then
    log "Limpiando imágenes Docker no utilizadas"
    docker system prune -af --filter "until=72h" 2>/dev/null || log "WARNING: No se pudo limpiar imágenes Docker"
fi

# Verificar espacio en disco
DISK_USAGE=$(df "$RUNNER_DIR" | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 85 ]; then
    log "WARNING: Uso de disco alto: $DISK_USAGE%"
    # Limpiar directorios de trabajo más agresivamente
    find "$RUNNER_DIR" -name "_work" -type d -exec bash -c '
        find "$1" -type f -mtime +0 -delete 2>/dev/null || true
    ' bash {} \;
fi

# Rotar log de limpieza
if [ -f "$LOG_FILE" ] && [ $(wc -l < "$LOG_FILE") -gt 1000 ]; then
    tail -n 500 "$LOG_FILE" > "$LOG_FILE.tmp"
    mv "$LOG_FILE.tmp" "$LOG_FILE"
fi

log "Limpieza completada exitosamente"
