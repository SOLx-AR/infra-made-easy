name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Tests unitarios y de integración
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22, 24]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        elif [ -f requirements.txt ]; then
          pip install -r requirements.txt
        elif [ -f go.mod ]; then
          go mod download
        fi
        
    - name: Run tests
      run: |
        if [ -f package.json ]; then
          npm test
        elif [ -f pytest.ini ] || [ -f setup.cfg ] || [ -f pyproject.toml ]; then
          pytest
        elif [ -f go.mod ]; then
          go test ./...
        fi

  # Job 2: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript, python, go

  # Job 3: Build y containerización
  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: Deploy a diferentes entornos
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    strategy:
      matrix:
        environment: 
          - name: webserver-ssl
            target: webserver_ssl_servers
            port: 443
          - name: monitoring
            target: monitoring_servers
            port: 3000
    
    environment: 
      name: ${{ matrix.environment.name }}
      url: https://${{ matrix.environment.name }}.infra-made-easy.local
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ansible
      run: |
        pip install ansible
        ansible-galaxy collection install -r requirements.yml
        
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy with Ansible
      env:
        ANSIBLE_HOST_KEY_CHECKING: false
      run: |
        ansible-playbook \
          -i inventory/hosts \
          --limit ${{ matrix.environment.target }} \
          --extra-vars "image_tag=${{ needs.build.outputs.image-tags }}" \
          --extra-vars "image_digest=${{ needs.build.outputs.image-digest }}" \
          deploy-${{ matrix.environment.name }}.yml

  # Job 5: Notificaciones y métricas
  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build, deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          CI/CD Pipeline Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Update deployment metrics
      if: success()
      run: |
        curl -X POST "${{ secrets.PROMETHEUS_PUSHGATEWAY_URL }}/metrics/job/github-actions/instance/${{ github.repository }}" \
          --data-binary "deployment_success{environment=\"${{ github.event.inputs.environment || 'auto' }}\"} 1"
