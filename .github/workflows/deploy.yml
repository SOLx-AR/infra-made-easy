name: Automated Deployment

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - webserver-ssl
          - monitoring
          - security
          - traefik
      strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary
      rollback:
        description: 'Enable rollback on failure'
        required: false
        default: true
        type: boolean

env:
  ANSIBLE_HOST_KEY_CHECKING: false
  ANSIBLE_STDOUT_CALLBACK: yaml

jobs:
  # Job para validar prerequisitos
  validate:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      strategy: ${{ steps.setup.outputs.strategy }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment parameters
      id: setup
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "strategy=${{ github.event.inputs.strategy }}" >> $GITHUB_OUTPUT
        else
          # Auto-deploy a webserver-ssl por defecto desde main
          echo "environment=webserver-ssl" >> $GITHUB_OUTPUT
          echo "strategy=rolling" >> $GITHUB_OUTPUT
        fi
        
    - name: Validate target environment
      run: |
        case "${{ steps.setup.outputs.environment }}" in
          webserver-ssl|monitoring|security|traefik)
            echo "‚úÖ Valid environment: ${{ steps.setup.outputs.environment }}"
            ;;
          *)
            echo "‚ùå Invalid environment: ${{ steps.setup.outputs.environment }}"
            exit 1
            ;;
        esac

  # Job para deployment con rolling strategy
  deploy-rolling:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.strategy == 'rolling'
    environment: 
      name: ${{ needs.validate.outputs.environment }}
      url: https://${{ needs.validate.outputs.environment }}.infra-made-easy.local
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ansible
      run: |
        pip install ansible
        ansible-galaxy collection install -r requirements.yml
        
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Rolling deployment
      run: |
        # Mapear environment a target group
        case "${{ needs.validate.outputs.environment }}" in
          webserver-ssl) TARGET_GROUP="webserver_ssl_servers" ;;
          monitoring) TARGET_GROUP="monitoring_servers" ;;
          security) TARGET_GROUP="security_servers" ;;
          traefik) TARGET_GROUP="traefik_servers" ;;
        esac
        
        ansible-playbook \
          -i inventory/hosts \
          --limit $TARGET_GROUP \
          --extra-vars "deployment_strategy=rolling" \
          --extra-vars "backup_before_deploy=true" \
          --extra-vars "rollback_enabled=${{ github.event.inputs.rollback || 'true' }}" \
          setup-${{ needs.validate.outputs.environment }}.yml

  # Job para deployment con blue-green strategy
  deploy-blue-green:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.strategy == 'blue-green'
    environment: 
      name: ${{ needs.validate.outputs.environment }}
      url: https://${{ needs.validate.outputs.environment }}.infra-made-easy.local
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ansible
      run: |
        pip install ansible
        ansible-galaxy collection install -r requirements.yml
        
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Blue-Green deployment
      run: |
        # Mapear environment a target group
        case "${{ needs.validate.outputs.environment }}" in
          webserver-ssl) TARGET_GROUP="webserver_ssl_servers" ;;
          monitoring) TARGET_GROUP="monitoring_servers" ;;
          security) TARGET_GROUP="security_servers" ;;
          traefik) TARGET_GROUP="traefik_servers" ;;
        esac
        
        # Deploy to blue environment first
        ansible-playbook \
          -i inventory/hosts \
          --limit $TARGET_GROUP \
          --extra-vars "deployment_strategy=blue-green" \
          --extra-vars "deployment_color=blue" \
          --extra-vars "health_check_enabled=true" \
          setup-${{ needs.validate.outputs.environment }}.yml
          
        # Switch traffic if health checks pass
        ansible-playbook \
          -i inventory/hosts \
          --limit $TARGET_GROUP \
          --extra-vars "switch_traffic=true" \
          --extra-vars "from_color=green" \
          --extra-vars "to_color=blue" \
          switch-traffic.yml

  # Job para deployment con canary strategy
  deploy-canary:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.strategy == 'canary'
    environment: 
      name: ${{ needs.validate.outputs.environment }}
      url: https://${{ needs.validate.outputs.environment }}.infra-made-easy.local
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Ansible
      run: |
        pip install ansible
        ansible-galaxy collection install -r requirements.yml
        
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Canary deployment
      run: |
        # Mapear environment a target group
        case "${{ needs.validate.outputs.environment }}" in
          webserver-ssl) TARGET_GROUP="webserver_ssl_servers" ;;
          monitoring) TARGET_GROUP="monitoring_servers" ;;
          security) TARGET_GROUP="security_servers" ;;
          traefik) TARGET_GROUP="traefik_servers" ;;
        esac
        
        # Deploy 20% traffic to canary
        ansible-playbook \
          -i inventory/hosts \
          --limit $TARGET_GROUP \
          --extra-vars "deployment_strategy=canary" \
          --extra-vars "canary_percentage=20" \
          --extra-vars "monitoring_duration=300" \
          setup-${{ needs.validate.outputs.environment }}.yml
          
        # Monitor for 5 minutes
        sleep 300
        
        # Full rollout if metrics are good
        ansible-playbook \
          -i inventory/hosts \
          --limit $TARGET_GROUP \
          --extra-vars "canary_rollout=complete" \
          --extra-vars "canary_percentage=100" \
          complete-canary.yml

  # Job para m√©tricas y cleanup
  post-deploy:
    runs-on: ubuntu-latest
    needs: [validate, deploy-rolling, deploy-blue-green, deploy-canary]
    if: always() && needs.validate.result == 'success'
    
    steps:
    - name: Update deployment metrics
      if: |
        needs.deploy-rolling.result == 'success' || 
        needs.deploy-blue-green.result == 'success' || 
        needs.deploy-canary.result == 'success'
      run: |
        DEPLOYMENT_STATUS="success"
        if [ "${{ needs.deploy-rolling.result }}" == "failure" ] || 
           [ "${{ needs.deploy-blue-green.result }}" == "failure" ] || 
           [ "${{ needs.deploy-canary.result }}" == "failure" ]; then
          DEPLOYMENT_STATUS="failure"
        fi
        
        curl -X POST "${{ secrets.PROMETHEUS_PUSHGATEWAY_URL }}/metrics/job/github-actions-deploy" \
          --data-binary "deployment_total{environment=\"${{ needs.validate.outputs.environment }}\",strategy=\"${{ needs.validate.outputs.strategy }}\",status=\"$DEPLOYMENT_STATUS\"} 1"
          
    - name: Clean up old images
      if: success()
      run: |
        echo "üßπ Cleaning up old container images..."
        # Aqu√≠ se podr√≠a implementar limpieza de im√°genes antiguas
        # docker system prune -af --filter "until=72h"
